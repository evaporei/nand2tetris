class Grid {
  field int xSize, ySize;

  field int foodX, foodY;

  field Array grid;

  constructor Grid new(int Ax, int Ay) {
    let xSize = Ax / 4;
    let ySize = Ay / 4;

    do initGrid();

    return this;
  }

  method void dispose() {
    var int x;
    var Array xGrid;

    let x = 0;
    while (x < xSize) {
      let xGrid = grid[x];
      do xGrid.dispose();
      let x = x + 1;
    }

    do Memory.deAlloc(this);
    return;
  }

  method void initGrid() {
    var int x, y;
    var Array xGrid;

    let grid = Array.new(xSize);
    let x = 0;

    while (x < xSize) {
      let xGrid = Array.new(ySize);
      let y = 0;
      while (y < ySize) {
        let xGrid[y] = false;
        let y = y + 1;
      }
      let grid[x] = xGrid;
      let x = x + 1;
    }

    return;
  }

  method void placeFood() {
    var boolean found;
    var int randX, randY;

    // don't put food on top of snake
    let found = false;
    while (~found) {
      let randX = Random.randRange(xSize);
      let randY = Random.randRange(ySize);
      if (~checkOccupied(randX, randY)) {
        let found = true;
      }
    }

    let foodX = randX;
    let foodY = randX;

    return;
  }

  method void drawSnakeBit(int x, int y) {
    do Screen.setColor(true);
    do Screen.drawRectangle(x * 4, y * 4, (x * 4) + 4, (y * 4) + 4);
    do setOccupied(x, y, true);
    return;
  }

  method void clearSnakeBit(int x, int y) {
    do Screen.setColor(false);
    do Screen.drawRectangle(x * 4, y * 4, (x * 4) + 4, (y * 4) + 4);
    do setOccupied(x, y, false);
    return;
  }

  method void drawFood() {
    do Screen.setColor(true);
    do Screen.drawCircle((foodX * 4) + 2, (foodY * 4) + 2, 2);

    return;
  }

  method void drawCrashed() {
    var String out;

    do Output.moveCursor(22, 12);
    let out = "*CRASHED*";
    do Output.printString(out);
    do out.dispose();

    return;
  }

  method void drawDone() {
    var String out;

    do Output.moveCursor(22, 12);
    let out = " [DONE]  ";
    do Output.printString(out);
    do out.dispose();

    return;
  }

  method void setOccupied(int x, int y, boolean occupied) {
    var Array xGrid;
    let xGrid = grid[x];
    let xGrid[y] = occupied;
    return;
  }

  method boolean checkOccupied(int x, int y) {
    var Array xGrid;
    let xGrid = grid[x];
    if (xGrid[y]) {
      return true;
    } else {
      return false;
    }
  }

  method boolean checkFood(int x, int y) {
    if (x = foodX & y = foodY) {
      return true;
    }

    return false;
  }

  method int xSize() {
    return xSize;
  }

  method int ySize() {
    return ySize;
  }
}
