class Game {
  field Snake snake;
  field int delay;
  field Grid grid;
  field int cycle;

  constructor Game new() {
    do Random.setSeed(RandomSeed.getSeed());
    let cycle = 0;
    let grid = Grid.new(512, 256);
    let snake = Snake.new(this, grid.xSize() / 2, grid.ySize() / 2);

    do grid.placeFood();

    return this;
  }

  method void dispose() {
    do snake.dispose();
    do grid.dispose();
    do Memory.deAlloc(this);
    return;
  }

  method void run() {
    var char key;
    var boolean exit;

    while (~exit) {
      if (key = 81) { let exit = true; }

      // up arrow
      if (key = 131 & ~(snake.getDir() = 2)) {
        do snake.setDir(1);
      }

      // down arrow
      if (key = 133 & ~(snake.getDir() = 1)) {
        do snake.setDir(2);
      }

      // left arrow
      if (key = 130 & ~(snake.getDir() = 4)) {
        do snake.setDir(3);
      }

      // right arrow
      if (key = 132 & ~(snake.getDir() = 3)) {
        do snake.setDir(4);
      }

      if (~snake.tryMove()) {
        do grid.drawCrashed();
        do Sys.halt();
      }

      if (grid.checkFood(snake.getX(), snake.getY())) {
        do snake.eatFood();
        do nextLevel();
        do grid.placeFood();
      }

      do Sys.wait(delay);
      do nextCycle();
    }

    do grid.drawDone();
    do Sys.halt();

    return;
  }

  method void nextCycle() {
    let cycle = cycle + 1;
    return;
  }

  method void nextLevel() {
    if (delay > 30) {
      let delay = delay - 5;
    }

    return;
  }

  method int getCycle() {
    return cycle;
  }

  method Grid getGrid() {
    return grid;
  }
}
