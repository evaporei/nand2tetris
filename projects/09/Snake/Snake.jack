class Snake {
  /* position of the snake in the screen */
  field int x, y;

  /* size of the snake */
  field int size;

  /* how much snake grows when it eats food */
  field int growBy;

  /* how much snake has left too grow */
  field int toGrow;

  /* length of the snake */
  field int length;

  /* history of snake's movements */
  field Array histX, histY;
  field int histSize;

  /**
   * 0 = none
   * 1 = up
   * 2 = down
   * 3 = left
   * 4 = right
   */
  field int direction;

  /* to get grid and game data */
  field Game game;

  constructor Snake new(Game Agame, int Ax, int Ay) {
    var int i;
    var Grid grid;

    let direction = 0;
    let length = 10;
    let growBy = 3;
    let toGrow = 0;
    let size = 10;

    let game = Agame;
    let grid = game.getGrid();
    let histSize = grid.xSize();

    let histX = Array.new(histSize);
    let histY = Array.new(histSize);

    let x = Ax - length;
    let y = Ay;

    let i = 0;
    while (i < length) {
      let x = x + 1;
      do drawHead(game.getCycle());
      let i = i + 1;
      do game.nextCycle();
    }

    return this;
  }

  method void dispose() {
    do histX.dispose();
    do histY.dispose();
    do Memory.deAlloc(this);
    return;
  }

  method void drawHead(int cycle) {
    var Grid grid;
    let grid = game.getGrid();

    do grid.drawSnakeBit(x, y);
    let histX[cycle] = x;
    let histY[cycle] = y;

    return;
  }

  method void clearTail(int cycle) {
    var Grid grid;
    var int tailIndex, tailX, tailY;

    let tailIndex = cycle - length;
    let tailX = histX[tailIndex];
    let tailY = histY[tailIndex];
    let grid = game.getGrid();
    do grid.clearSnakeBit(tailX, tailY);

    return;
  }

  method boolean tryMove() {
    var Grid grid;
    let grid = game.getGrid();

    if (direction = 1) {
      // up
      if (y = 0) {
        return false;
      }
      else {
        let y = y - 1;
      }
    }

    if (direction = 2) {
      // down
      if (y = grid.ySize()) {
        return false;
      }
      else {
        let y = y + 1;
      }
    }

    if (direction = 3) {
      // left
      if (x = 0) {
        return false;
      }
      else {
        let x = x - 1;
      }
    }

    if (direction = 4) {
      // right
      if (x = grid.xSize()) {
        return false;
      }
      else {
        let x = x + 1;
      }
    }

    if (grid.checkOccupied(x, y)) {
      return false;
    }

    return true;
  }

  method void rewriteHistory() {
    var int i, src, dst;

    let i = length;
    let dst = 0;
    let src = histSize - length;

    while (i > 0) {
      let histX[dst] = histX[src];
      let histY[dst] = histY[src];
      let src = src + 1;
      let dst = dst + 1;
      let i = i - 1;
    }

    return;
  }

  method void eatFood() {
    let toGrow = toGrow + growBy;
    return;
  }

  method void grow(int cycle) {
    // draw new head
    do drawHead(cycle);

    // should the snake grow?
    if (toGrow > 0) {
      let toGrow = toGrow - 1;
      let length = length + 1;
    }
    // clear old tail
    else {
      do clearTail(cycle);
    }

    return;
  }

  method int getDir() {
    return direction;
  }

  method void setDir(int dir) {
    let direction = dir;
    return;
  }

  method int getX() {
    return x;
  }

  method int getY() {
    return y;
  }
}
