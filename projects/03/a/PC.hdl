// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/PC.hdl

/**
 * A 16-bit counter with load and reset control bits.
 * if      (reset[t] == 1) out[t+1] = 0
 * else if (load[t] == 1)  out[t+1] = in[t]
 * else if (inc[t] == 1)   out[t+1] = out[t] + 1  (integer addition)
 * else                    out[t+1] = out[t]
 */

CHIP PC {
    IN in[16],load,inc,reset;
    OUT out[16];

    PARTS:
    // Put your code here:

    // Increment what's in the current register
    Inc16(in=register, out=regInc);

    // If inc = 1, regOrInc=regInc else regOrInc=register
    Mux16(a=register, b=regInc, sel=inc, out=regOrInc);

    // Select between input given to load, or incremented
    // value from the register.
    Mux16(a=regOrInc, b=in, sel=load, out=loadOrInc);

    // Reset the 16-bit value to zero if necessary
    Mux16(a=loadOrInc, b[0..15]=false, sel=reset, out=regReset);

    // I hate this load=true, but that's the only way I found
    // to solve it. It works because we do a `load` switch before
    // to keep the old value or not of the register.
    // So it's kind of "inefficient" but in the end depends on
    // how the "hardware engineer" will implement this.
    Register(in=regReset, load=true, out=out, out=register);
}
